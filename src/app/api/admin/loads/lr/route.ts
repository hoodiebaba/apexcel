import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import path from "path";
import fs from "fs";
import crypto from "crypto";
import { renderPdfToFile, ensureDir } from "@/lib/pdf";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

function hash(obj: any) {
  return crypto.createHash("sha256").update(JSON.stringify(obj ?? {})).digest("hex").slice(0, 12);
}

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    if (!id) return NextResponse.json({ error: "id required" }, { status: 400 });

    const load = await prisma.load.findUnique({ where: { id } });
    if (!load) return NextResponse.json({ error: "not found" }, { status: 404 });

    const key = hash({
      loadNumber: load.loadNumber,
      lrNumber: load.lrNumber,
      lrDate: load.lrDate,
      lrValue: load.lrValue,
      lrDescription: load.lrDescription,
      lrPackages: load.lrPackages,
      lrInstructions: load.lrInstructions,
      consignor: load.consignor,
      consignee: load.consignee,
      originCities: load.originCities,
      destinationCities: load.destinationCities,
      vehicleTypes: load.vehicleTypes,
      materialTypes: load.materialTypes,
      paymentTerms: load.paymentTerms,
    });

    const folderFS  = path.join(process.cwd(), "public", "uploads", "LRInvoice", "admin", "LR");
    const filename  = `LR-${load.loadNumber ?? id}-${key}.pdf`;
    const fileFS    = path.join(folderFS, filename);
    const filePublic = `/uploads/LRInvoice/admin/LR/${filename}`;
    const absUrl = new URL(filePublic, req.url).toString();

    if (fs.existsSync(fileFS)) {
      if (load.lorryReceiptFile !== filePublic) {
        await prisma.load.update({ where: { id: load.id }, data: { lorryReceiptFile: filePublic } });
      }
      return NextResponse.redirect(absUrl);
    }

    await ensureDir(folderFS);

    await renderPdfToFile((doc) => {
      const line = (label: string, val: any) => doc.fontSize(11).text(`${label}: ${val ?? "-"}`);

      doc.fontSize(16).text("Lorry Receipt");
      doc.moveDown(0.5);

      line("LR #", load.lrNumber ?? "-");
      line("Load #", load.loadNumber ?? "-");
      line("LR Date", load.lrDate ? new Date(load.lrDate).toLocaleString("en-IN") : "-");
      doc.moveDown(0.5);

      doc.fontSize(13).text("Consignor (Vendor)");
      const s = (load.consignor as any) || {};
      line("Name", s.name);
      line("Phone", s.phone ?? s.number);
      line("GST", s.gstNumber);
      line("PAN", s.panNumber);
      line("Address", s.address);
      doc.moveDown(0.5);

      doc.fontSize(13).text("Consignee (Customer)");
      const rcv = (load.consignee as any) || {};
      line("Name", rcv.name);
      line("Phone", rcv.phone ?? rcv.number);
      line("GST", rcv.gstNumber);
      line("PAN", rcv.panNumber);
      line("Address", rcv.address);
      doc.moveDown(0.5);

      doc.fontSize(13).text("Trip");
      line("Origin", (load.originCities || []).join(", "));
      line("Destination", (load.destinationCities || []).join(", "));
      line("Vehicle Types", (load.vehicleTypes || []).join(", "));
      line("Material Types", (load.materialTypes || []).join(", "));
      doc.moveDown(0.5);

      doc.fontSize(13).text("Details");
      line("Packages", load.lrPackages);
      line("Value", load.lrValue);
      line("Description", load.lrDescription);
      line("Instructions", load.lrInstructions);
      line("Payment Terms", load.paymentTerms);
      doc.moveDown(1);

      doc.fontSize(10).text("Generated by Apexcel");
    }, fileFS);

    await prisma.load.update({ where: { id: load.id }, data: { lorryReceiptFile: filePublic } });
    return NextResponse.redirect(absUrl);
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "failed" }, { status: 500 });
  }
}