import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import path from "path";
import fs from "fs";
import crypto from "crypto";
import { renderPdfToFile, ensureDir } from "@/lib/pdf";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

function hash(obj: any) {
  return crypto.createHash("sha256").update(JSON.stringify(obj ?? {})).digest("hex").slice(0, 12);
}

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");
    if (!id) return NextResponse.json({ error: "id required" }, { status: 400 });

    const load = await prisma.load.findUnique({ where: { id } });
    if (!load) return NextResponse.json({ error: "not found" }, { status: 404 });

    const key = hash({
      loadNumber: load.loadNumber,
      invoiceNumber: load.invoiceNumber,
      invoiceDate: load.invoiceDate,
      invoiceValue: load.invoiceValue,
      invoiceDescription: load.invoiceDescription,
      invoicePackages: load.invoicePackages,
      invoiceInstructions: load.invoiceInstructions,
      consignor: load.consignor,
      consignee: load.consignee,
      pricing: {
        basicFreight: load.basicFreight,
        fuelCharges: load.fuelCharges,
        loadingCharges: load.loadingCharges,
        unloadingCharges: load.unloadingCharges,
        detentionLoading: load.detentionLoading,
        detentionUnloading: load.detentionUnloading,
        otherCharges: load.otherCharges,
        subTotal: load.subTotal,
        gstRate: load.gstRate,
        gstAmount: load.gstAmount,
        totalAmount: load.totalAmount,
      },
      paymentTerms: load.paymentTerms,
    });

    const folderFS  = path.join(process.cwd(), "public", "uploads", "LRInvoice", "admin", "Invoice");
    const filename  = `Invoice-${load.loadNumber ?? id}-${key}.pdf`;
    const fileFS    = path.join(folderFS, filename);
    const filePublic = `/uploads/LRInvoice/admin/Invoice/${filename}`;
    const absUrl = new URL(filePublic, req.url).toString();

    if (fs.existsSync(fileFS)) {
      if (load.invoiceFile !== filePublic) {
        await prisma.load.update({ where: { id: load.id }, data: { invoiceFile: filePublic } });
      }
      return NextResponse.redirect(absUrl);
    }

    await ensureDir(folderFS);

    await renderPdfToFile((doc) => {
      const line = (label: string, val: any) => doc.fontSize(11).text(`${label}: ${val ?? "-"}`);

      doc.fontSize(16).text("Tax Invoice");
      doc.moveDown(0.5);

      line("Invoice #", load.invoiceNumber ?? "-");
      line("Load #", load.loadNumber ?? "-");
      line("Invoice Date", load.invoiceDate ? new Date(load.invoiceDate).toLocaleString("en-IN") : "-");
      line("Payment Terms", load.paymentTerms ?? "-");
      doc.moveDown(0.5);

      doc.fontSize(13).text("Billed To (Customer)");
      const c = (load.consignee as any) || {};
      line("Name", c.name);
      line("Phone", c.phone ?? c.number);
      line("GST", c.gstNumber);
      line("PAN", c.panNumber);
      line("Address", c.address);
      doc.moveDown(0.5);

      doc.fontSize(13).text("Supplier (Vendor)");
      const v = (load.consignor as any) || {};
      line("Name", v.name);
      line("Phone", v.phone ?? v.number);
      line("GST", v.gstNumber);
      line("PAN", v.panNumber);
      line("Address", v.address);
      doc.moveDown(0.5);

      doc.fontSize(13).text("Charges");
      line("Basic Freight", load.basicFreight);
      line("Fuel Charges", load.fuelCharges);
      line("Loading Charges", load.loadingCharges);
      line("Unloading Charges", load.unloadingCharges);
      line("Detention (Loading)", load.detentionLoading);
      line("Detention (Unloading)", load.detentionUnloading);
      line("Other Charges", load.otherCharges);
      line("Sub Total", load.subTotal);
      line("GST Rate (%)", load.gstRate);
      line("GST Amount", load.gstAmount);
      line("Total Amount", load.totalAmount);
      doc.moveDown(0.5);

      doc.fontSize(13).text("Description");
      line("Text", load.invoiceDescription);
      line("Packages", load.invoicePackages);
      line("Instructions", load.invoiceInstructions);
      doc.moveDown(1);

      doc.fontSize(10).text("Generated by Apexcel");
    }, fileFS);

    await prisma.load.update({ where: { id: load.id }, data: { invoiceFile: filePublic } });
    return NextResponse.redirect(absUrl);
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "failed" }, { status: 500 });
  }
}